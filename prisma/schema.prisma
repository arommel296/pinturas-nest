// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  password     String
  name         String?
  picture      Image?
  dni          String?        @unique
  phone        String?
  bills        Bill[]
  usersOnRoles UsersOnRoles[]
  location     Location?      @relation(fields: [locationId], references: [id])
  locationId   Int?
}

model Image {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique
  user               User?                @relation(fields: [userId], references: [id])
  userId             Int?                 @unique
  work               Work?                @relation(fields: [workId], references: [id])
  workId             Int?                 @unique
  imagesOnCategories ImagesOnCategories[]
}

model Estimate {
  id       Int                   @id @default(autoincrement())
  name     String
  file     String
  sent     Boolean
  services ServicesOnEstimates[]
  bill     Bill                  @relation(fields: [billId], references: [id])
  billId   Int
}

model Service {
  id                  Int                   @id @default(autoincrement())
  name                String
  servicesOnEstimates ServicesOnEstimates[]
  servicesOnBills     ServicesOnBills[]
}

model ServicesOnEstimates {
  estimate   Estimate @relation(fields: [estimateId], references: [id])
  estimateId Int
  service    Service  @relation(fields: [serviceId], references: [id])
  serviceId  Int
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([estimateId, serviceId])
}

model Bill {
  id              Int               @id @default(autoincrement())
  name            String
  file            String
  sent            Boolean
  user            User?             @relation(fields: [userId], references: [id])
  userId          Int
  estimate        Estimate[]
  servicesOnBills ServicesOnBills[]
}

model ServicesOnBills {
  bill       Bill     @relation(fields: [billId], references: [id])
  billId     Int
  service    Service  @relation(fields: [serviceId], references: [id])
  serviceId  Int
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([billId, serviceId])
}

model Work {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  pictures    Image[]
}

model Category {
  id                 Int                  @id @default(autoincrement())
  name               String
  imagesOnCategories ImagesOnCategories[]
}

model ImagesOnCategories {
  image      Image    @relation(fields: [imageId], references: [id])
  imageId    Int
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([imageId, categoryId])
}

model Role {
  id           Int            @id @default(autoincrement())
  name         String
  usersOnRoles UsersOnRoles[]
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  role       Role     @relation(fields: [roleId], references: [id])
  roleId     Int
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

model Location {
  id         Int      @id @default(autoincrement())
  name       String
  code       String
  province   Province @relation(fields: [provinceId], references: [id])
  provinceId Int
  User       User[]
}

model Province {
  id        Int        @id @default(autoincrement())
  name      String
  code      String
  locations Location[]
}
